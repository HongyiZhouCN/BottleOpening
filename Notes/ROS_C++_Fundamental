1. Writing a publisher Node
    node is the ros term for an executable that is connected to the ROS network

    #include "ros/ros.h"
    #include "std_msgs/String.h"

    #include <sstream>

    int main(int argc, char **argv)
    {
        ros::init(argc, argv, "talker");  # argc/argv transfer parameters from command line to rosnode, "talker" is the name of this node
        ros::NodeHandle n;
        ros::Publisher chatter_pub = n.advertise<std_msgs::String>("chatter", 1000);
        ros::Rate loop_rate(10);

        int count = 0;
        while(ros::ok())  #keep sending out message when roscore is running
        {
            std_msgs::String msg;

            std::stringstream ss;
            ss<< "hello world" << count;
            msg.data = ss.str();

            ROS_INFO("%s", msg.data.c_str());

            chatter_pub.publish(msg);
            ros::spinOnce();
            loop_rate.sleep();
            ++count
        }
        return 0;
    }

1. Writing a Simple Service

    #include "ros/ros.h"

    bool add(beginner_tutorials::AddTwoInts::Request &req,
            beginner_tutorials::AddTwoInts::Response &res)
            {
                res.sum = req.a + req.b;
                return true;
            }

    int main(int argc, char **argv)
    {
        ros::init(argc, argv, "add_two_ints_server");
        ros::NodeHandle n;

        ros::ServiceServer service = n.advertiseService("add_two_ints", add);
        ROS_INFO("Ready to add two ints.");
        ros::spin();

        return 0;
    }

2. Writing a Simple Client Node (to the service)

    #include "ros/ros.h"
    #include <cstdlib>

    int main(int argc, char **argv)
    {
        ros::init(argc, argv, "add_two_ints_client");
        if (argc != 3)
        {
            ROS_INFO("usage: add_two_ints_client X Y");
            return 1;
        }

        ros::NodeHandle n;
        ros::ServiceClient client = n.serviceClient<beginner_tutorials::AddTwoInts>("add_two_ints");
        beginner_tutorials::AddTwoInts srv;                    # It's a self defined service type, which is basically a data structure contains request/Response datatype
        srv.request.a = atoll(argv[1]);
        srv.request.b = atoll(argv[2]);
        if(client.call(srv))
        {
            ROS_INFO("Sum: %d", (long int)srv.response.sum);
        }
        else
        {
           ROS_ERROR("Failed to call service add_two_ints");
           return 1; 
        }

        return 0;
    }

